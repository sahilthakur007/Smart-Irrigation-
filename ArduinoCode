#include <ESP8266WiFi.h>
#include <FirebaseArduino.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// Set these to run example.
#define FIREBASE_HOST "smart-irrigation-d65e8-default-rtdb.firebaseio.com"
#define FIREBASE_AUTH "mtsWVSA4UDe0ohv4lzwIkxPyYaIfTE3kWUmjuPgj"
#define WIFI_SSID "Infinix HOT 7"
#define WIFI_PASSWORD "sahil123"
int sensorpin=A0;
int sensorvalue=0;
int outputvalue=0;
#define echoPin D2
#define trigPin D1
double  duration;
double distance;
 double tankheight = 10.3; 

bool isoff = true ;
int speedLevel = 0;  
int takemoisture = 1000000; 
String  dayWeek [] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "in.pool.ntp.org", 19800, 60000);
void setup() {
  Serial.begin(9600);

  // connection  to wifi.
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

  Serial.print("connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println();
  Serial.print("connected: ");
  Serial.println(WiFi.localIP());
  timeClient.begin();
  
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);



  pinMode (D4,OUTPUT);
  pinMode (A0,INPUT);
  pinMode(trigPin, OUTPUT); 
  pinMode(echoPin, INPUT); 
  delay(2000);   
}

int n = 0;

void loop() {


   sensorvalue=analogRead(A0);
 outputvalue=100-map(sensorvalue,0,1023,0,100); 
double waterLevel = calculateDistance() ; 

 Firebase.setInt("waterLeval", waterLevel);

 timeClient.update();
  String day = dayWeek[timeClient.getDay()];
  String timev = timeClient.getFormattedTime(); 
  String date_time = timeClient.getFormattedDate(); 

  int index_date = date_time.indexOf("T"); 
  String dd = date_time.substring(8,index_date); 
  String mm = date_time.substring(5,index_date-3); 
  String yyyy = date_time.substring(0,index_date-6); 
  String date = (dd+" "+mm+" "+yyyy);

  Serial.println(date);

  // updating the moisture table 
  if(timev>="11:00:00" and timev<="11:00:05")
  {  
    Firebase.pushString("Moisture_Table/Date",date );
    Firebase.pushString("Moisture_Table/Day",day );
    Firebase.pushString("Moisture_Table/Time",timev );
    Firebase.pushInt("Moisture_Table/Moisture",outputvalue );
    takemoisture = 10000; 
  }
 

 


  // setting moisture level 
  
  Firebase.setInt("Moisture", outputvalue);
 
  if (Firebase.failed()) {
      Serial.print("setting /Moiture failed:");
      Serial.println(Firebase.error());  
      return;
  }

  //----
  isoff = Firebase.getBool("Pump Status");


  if(!isoff)
{
     analogWrite(D4,LOW) ;
}
else{
       digitalWrite(D4,HIGH) ;

}



if( outputvalue<20 and isoff and waterLevel>0)
  {   //automatic turn on of motor

       Firebase.setBool("isOnManually", false);
       //entries in the pump data 
       Firebase.pushString("pumpData/date",date);
       Firebase.pushString("pumpData/time",timev);
       Firebase.pushString("pumpData/status","automatic ON");

       
   Firebase.setBool("Pump Status", false);
  if (Firebase.failed()) {
      Serial.print("setting /message failed:");
      Serial.println(Firebase.error());  
      return;
  }   
    delay(1000); 
  }
  else if(outputvalue>60 and !isoff)
  {
       // automatic turn OFF of motor
       Firebase.setBool("isOffManually", false);
       Firebase.setBool("Pump Status", true); 
       Firebase.pushString("pumpData/date",date);
       Firebase.pushString("pumpData/time",timev);
       Firebase.pushString("pumpData/status","automatic OFF");

  if (Firebase.failed()) {
      Serial.print("setting /message failed:");
      Serial.println(Firebase.error());  
      return;
  }
  
  }
   
}

// calculating water level 
double  calculateDistance()
{

digitalWrite(trigPin, LOW);
delayMicroseconds(2);


digitalWrite(trigPin, HIGH);
delayMicroseconds(10);
digitalWrite(trigPin, LOW);


duration = pulseIn(echoPin, HIGH);
distance = duration * 0.034 / 2; 
Serial.println("distance = ");

Serial.println(distance);
double waterLevel = 100-map(distance,0,8,0,100);
if(waterLevel>0){
  return waterLevel; 
}
else return 0 ; 
}
